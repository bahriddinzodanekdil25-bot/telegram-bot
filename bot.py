import requests
from datetime import datetime
import pytz
from timezonefinderL import TimezoneFinder
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# ================== –í–°–¢–ê–í–¨ –°–í–û–ò –¢–û–ö–ï–ù–´ ==================
TELEGRAM_TOKEN = '7743697748:AAE7HC34h3pDCE8lwKsTnaF4Udm4FzW-z8w'
OPENAI_API_KEY = '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'  # ‚ö†Ô∏è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—Ç–∞–≤—å –Ω–∞—Å—Ç–æ—è—â–∏–π API –∫–ª—é—á, –Ω–µ —Å—Å—ã–ª–∫—É!
WEATHER_API_KEY = '9bb0bef8666686773ba2e7461e1eb27b'
# ==========================================================

openai.api_key = OPENAI_API_KEY

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = [
    [KeyboardButton("üí¨ GPT-—á–∞—Ç")],
    [KeyboardButton("üïí –í—Ä–µ–º—è")],
    [KeyboardButton("üå¶ –ü–æ–≥–æ–¥–∞")]
]
reply_markup = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)

# ===== /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üí¨ GPT-—á–∞—Ç":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üí≠")
        context.user_data["mode"] = "gpt"

    elif text == "üïí –í—Ä–µ–º—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ‚è∞")
        context.user_data["mode"] = "time"

    elif text == "üå¶ –ü–æ–≥–æ–¥–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã üå¶")
        context.user_data["mode"] = "weather"

    elif context.user_data.get("mode") == "gpt":
        await gpt_reply(update, text)

    elif context.user_data.get("mode") == "time":
        await send_time(update, text)

    elif context.user_data.get("mode") == "weather":
        await send_weather(update, text)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é üôÇ")

# ===== GPT-–æ—Ç–≤–µ—Ç (–¥–ª—è openai>=1.0.0) =====
async def gpt_reply(update: Update, user_text: str):
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_text}],
            max_tokens=500
        )
        text = response.choices[0].message.content
        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ GPT: {e}")

# ===== –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è =====
async def send_time(update: Update, city: str):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}"
        res = requests.get(url).json()
        if res.get('cod') != 200:
            await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        lat = res['coord']['lat']
        lon = res['coord']['lon']

        tz = TimezoneFinder().timezone_at(lat=lat, lng=lon)
        local_time = datetime.now(pytz.timezone(tz)).strftime("%H:%M")
        await update.message.reply_text(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ {city}: {local_time}")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")

# ===== –ü–æ–≥–æ–¥–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑ =====
async def send_weather(update: Update, city: str):
    try:
        url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data["cod"] != "200":
            await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        city_name = data["city"]["name"]
        country = data["city"]["country"]
        lat, lon = data["city"]["coord"]["lat"], data["city"]["coord"]["lon"]

        tz = TimezoneFinder().timezone_at(lat=lat, lng=lon)
        local_time = datetime.now(pytz.timezone(tz)).strftime("%H:%M")

        current = data["list"][0]
        temp = current["main"]["temp"]
        desc = current["weather"][0]["description"]

        forecast_text = f"üìç {city_name}, {country}\n‚è∞ –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {local_time}\nüå° –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: {temp}¬∞C, {desc}\n\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π:\n"
        for i in range(0, len(data["list"]), 8):
            day = data["list"][i]
            date = datetime.fromtimestamp(day["dt"]).strftime("%d.%m")
            temp = day["main"]["temp"]
            desc = day["weather"][0]["description"]
            forecast_text += f"{date}: {temp}¬∞C, {desc}\n"

        await update.message.reply_text(forecast_text)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
